/*
 * Automatically generated by Magic
 */


// Importing material theming such that we can de-reference variables in active theme.
@import "~@angular/material/theming";

/*
 * Custom shared classes needed to wire up CRUD components correctly.
 */

// Elements needing to absolutely position buttons and widgets.
.relativized {
  position: relative;
}

// Elements wanting to right align their content.
.right-aligned {
  text-align: right;
  width: 100%;
  display: block !important;
}

// Elements wanting to fill the entire available width.
.fill-width {
  width: 100%;
}

.mat-list-item:hover {
  background-color: mat-color($app-primary, 500);
}

.mat-list-item.active {
  background-color: mat-color($app-primary, 700);
}

/*
 * Styles for CRUD components and more specifically its actual material table,
 * and its wrapper elements.
 */
.component-wrapper {
  position: relative;
  padding-top: 1rem;
  margin-bottom: 1rem;

  .grid-wrapper {
    min-width: fit-content;
    margin-left: 1rem;
    margin-right: 1rem;

    .create-button {
      position: absolute !important;
      top: 0;
      right: 0;
      color: mat-color($app-primary, 500);
    }

    // Actual material data table for CRUD components.
    table {
      padding-top: 4rem;
      padding-left: 1rem;
      padding-right: 1rem;
      width: 100%;

      tr {
        transition-property: background-color;
        transition-duration: 0.2s;

        th, td {
          display: none;
          max-width: 80px;
        }

        td {
          text-overflow: ellipsis;
          overflow: hidden;
          white-space: nowrap;
          padding-right: 1.5rem;

          // View details parts of material table.
          .details-sheet {
            border: solid 1px mat-color($app-primary, 200);
            margin-top: 3rem;
            margin-bottom: 3rem;
            border-radius: 0.5rem;
            padding: 0 1rem 0 1rem;
            position: relative;

            // Edit details button.
            .edit-button {
              position: absolute;
              bottom: 0;
              right: 0;
              padding-right: 0;
            }

            // 'Card' that shows details of entities.
            .details {
              flex-grow: 1;
              width: 100%;
              height: 100%;

              // Descriptive label for entity field.
              label {
                display: block;
                margin-top: 1rem;
                margin-bottom: 0.5rem;
                font-weight: bold;
              }

              // Content of entity field.
              span {
                white-space: normal;
                display: block;
              }
            }
          }
        }

        // Without this no columns will show when screen is very small
        th:nth-child(1),
        td:nth-child(1) {
          display: table-cell;
        }

        // Headers
        th {
          // Filtering text boxes
          .filter-textbox {
            float: left;
            font-size: 10px;
            width: calc(100% - 70px);
          }

          // Sort buttons
          .sort-button {
            margin-top: 2px;
            float: right;
            width: 70px;
            box-sizing: border-box;
            padding-left: 0;
            padding-right: 0;
          }
        }

        // Needed to make sure we always display delete row buttons.
        td.delete-column,
        th.delete-column {
          display: table-cell;
          width: 70px;
          text-align: right;
          padding-right: 0;
          color: mat-color($app-primary, 500);
        }

        // Necessary to make it possible to toggle rows such that they become visible once clicked.
        td.hidden,
        th.hidden {
          display: none !important;
        }

        // Needed to make sure details row always has no padding, to align details with the rest of the table.
        td.mat-column-details {
          padding-left: 0;
          padding-right: 0;
        }
      }

      // Class for when row has been toggled to display details.
      tr.visible-details {
        td {
          border-bottom-color: transparent !important;
          background-color: mat-color($app-primary, 700);
        }
      }

      // Making sure we communicate that column is clickable and give some visual clues.
      tr.mat-row:hover {
        cursor: pointer;
        background-color: mat-color($app-primary, 500);
        transition-property: background-color;
        transition-duration: 0.1s;
      }

      // Row that displays details.
      tr.details-row {
        cursor: inherit;
        background-color: transparent !important;
        td {
          // Creating some animations used when column is toggled.
          @keyframes drop-down {
            0% {
              opacity: 0;
              margin-top: -100px;
            }
            100% {
              opacity: 1;
              margin-top: 2rem;
            }
          }

          // Applying animation for details rows.
          .details-sheet {
            animation: drop-down 0.2s ease-in;
            animation-fill-mode: forwards;
          }
        }
      }

      // Important ro make sure details doesn't appear to be clickable.
      tr.details-row:hover {
        cursor: inherit;
      }
      tr.hidden {
        display: none;
      }
    }
  }
}

/*
 * Overrides to make design responsive, as in working on smaller devices.
 */
@media screen and (min-width: 590px) {
  .component-wrapper {
    table {
      tr {
        // Ensuring the first column is always visible.
        th:nth-child(1),
        td:nth-child(1) {
          display: table-cell;
        }
      }
    }
  }
}

@media screen and (min-width: 700px) {
  .component-wrapper {
    table {
      tr {
        // Ensuring the first column is always visible.
        th:nth-child(2),
        td:nth-child(2) {
          display: table-cell;
        }
        td {
          .details-sheet {
            display: flex;
            flex-wrap: wrap;
            .details {
              height: 100%;
              width: 50% !important;
            }
          }
        }
      }
    }
  }
}

@media screen and (min-width: 1080px) {
  .component-wrapper {
    table {
      tr {
        th:nth-child(3),
        td:nth-child(3) {
          display: table-cell;
        }
        td {
          .details-sheet {
            padding: 0 2rem 1rem 2rem !important;
            margin-top: 2rem;
            margin-bottom: 3rem;
          }
        }
      }
    }
  }
}

@media screen and (min-width: 1420px) {
  .component-wrapper {
    table {
      tr {
        th:nth-child(4),
        td:nth-child(4) {
          display: table-cell;
        }
      }
    }
  }
}

@media screen and (min-width: 1620px) {
  .component-wrapper {
    table {
      tr {
        th:nth-child(5),
        td:nth-child(5) {
          display: table-cell;
        }
      }
    }
  }
}

@media screen and (min-width: 2048px) {
  .component-wrapper {
    table {
      tr {
        th:nth-child(6),
        td:nth-child(6) {
          display: table-cell;
        }
      }
    }
  }
}

.invisible {
  display: none;
}

.entity-edit-field {
  width: calc(100% - 1.2rem);
  margin-right: 1rem;
  display: inline-block;
  mat-icon {
    color: rgb(128, 128, 128);
    font-size: 1.1rem !important;
  }
}

@media screen and (min-width: 800px) {
  .entity-edit-field {
    width: calc(50% - 1.2rem);
    margin-right: 1rem;
    text-transform: capitalize;
    display: inline-block;
  }
  .entity-edit-field:only-child {
    width: calc(100% - 1.2rem);
  }
  .mat-dialog-content {
    min-width:500px;
  }
}
