/*
 * Automatically generated by Magic
 */

import { AfterViewInit, Component, OnInit, ViewChild } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { finalize } from 'rxjs/operators';

import { environment } from '@env/environment';
import { Logger, UntilDestroy, untilDestroyed } from '@core';
import { AuthenticationService } from './authentication.service';
import { MatButton } from '@angular/material/button';
import { FormBuilder, Validators } from '@angular/forms';
import { MatSnackBar } from '@angular/material/snack-bar';

const log = new Logger('Login');

@UntilDestroy()
@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.scss'],
})
export class LoginComponent implements OnInit, AfterViewInit {
  @ViewChild('btnAutoFocus') public btnAutoFocus: MatButton;

  version: string | null = environment.version;
  error: string | undefined;

  isLoading = false;

  constructor(
    private router: Router,
    private route: ActivatedRoute,
    private formBuilder: FormBuilder,
    private authenticationService: AuthenticationService,
    private snackbar: MatSnackBar
  ) {}

  public loginForm = this.formBuilder.group({
    username: ['admin', [Validators.required]],
    password: ['admin', [Validators.required]],
    remember: true,
  });

  ngOnInit() {}

  login() {
    this.isLoading = true;
    const login$ = this.authenticationService.login(this.loginForm.value);
    login$
      .pipe(
        finalize(() => {
          this.loginForm.markAsPristine();
          this.isLoading = false;
        }),
        untilDestroyed(this)
      )
      .subscribe(
        (credentials) => {
          log.debug(`${credentials.username} successfully logged in`);
          this.router.navigate(
            [this.route.snapshot.queryParams.redirect || '/'],
            { replaceUrl: true }
          );
        },
        (error) => {
          log.debug(`Login error: ${error}`);
          this.snackbar.open(error.error.message, null, { duration: 2000 });
          this.error = error;
        }
      );
  }

  ngAfterViewInit(): void {
    this.btnAutoFocus.focus();
  }
}
